{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Display","react_default","a","createElement","id","this","props","display","Component","Buttons","value","onClick","numbers","clear","operate","equal","App","state","operand1","operand2","operator","decimal","lastInput","backup","doubleOperator","initialState","_this","e","target","setState","calculate","parseFloat","_this2","App_Display","App_Buttons","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9cfeb865.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Display extends Component {\n  render() {\n    return (\n      <div id=\"display\">\n        {this.props.display}\n      </div>\n    )\n  }\n}\n\nclass Buttons extends Component {\n  render() {\n    return (\n      <div id=\"buttons\">\n        <div id=\"numbers\">\n          <button id=\"one\" value=\"1\" onClick={this.props.numbers}>1</button>\n          <button id=\"two\" value=\"2\" onClick={this.props.numbers}>2</button>\n          <button id=\"three\" value=\"3\" onClick={this.props.numbers}>3</button>\n          <button id=\"four\" value=\"4\" onClick={this.props.numbers}>4</button>\n          <button id=\"five\" value=\"5\" onClick={this.props.numbers}>5</button>\n          <button id=\"six\" value=\"6\" onClick={this.props.numbers}>6</button>\n          <button id=\"seven\" value=\"7\" onClick={this.props.numbers}>7</button>\n          <button id=\"eight\" value=\"8\" onClick={this.props.numbers}>8</button>\n          <button id=\"nine\" value=\"9\" onClick={this.props.numbers}>9</button>\n          <button id=\"decimal\" value=\".\" onClick={this.props.numbers}>.</button>\n          <button id=\"zero\" value=\"0\" onClick={this.props.numbers}>0</button>\n        </div>\n        <div id=\"operators\">\n          <button id=\"clear\" onClick={this.props.clear}>C</button>\n          <button id=\"add\" value=\"add\" onClick={this.props.operate}>+</button>\n          <button id=\"subtract\" value=\"subtract\" onClick={this.props.operate}>-</button>\n          <button id=\"multiply\" value=\"multiply\" onClick={this.props.operate}>x</button>\n          <button id=\"divide\" value=\"divide\" onClick={this.props.operate}>/</button>\n          <button id=\"equals\" onClick={this.props.equal}>=</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass App extends Component {\n  state = {\n    display: 0,\n    operand1: 0,\n    operand2: 0,\n    operator: \"\",\n    decimal: false,\n    lastInput: \"\",\n    backup: {\n      operand1: 0,\n      operand2: 0,\n      operator: \"\"\n    },\n    doubleOperator: false\n  }\n\n  initialState = this.state;\n\n  numbers(e) {\n    if (e.target.value === \".\") {\n      if (!this.state.decimal) {\n        this.setState({\n          decimal: true\n        })\n        if (this.state.display != 0) {\n          this.setState({\n            display: this.state.display + e.target.value,\n            lastInput: \"number\"\n          })\n        } else {      \n          this.setState({\n            display: e.target.value,\n            lastInput: \"number\"\n          })\n        }\n      }\n    } else {\n      if (this.state.display != 0) {\n        this.setState({\n          display: this.state.display + e.target.value,\n            lastInput: \"number\"\n        })\n      } else {      \n        this.setState({\n          display: e.target.value,\n            lastInput: \"number\"\n        })\n      }\n    }\n  }\n\n  equal() {\n    if (this.state.operand1 && this.state.display && this.state.operator) {\n      const display = this.calculate(this.state.operand1, this.state.display, this.state.operator);\n\n      this.setState({\n        display: display,\n        operator: \"\"\n      })\n    }\n  }\n\n  calculate(operand1, operand2, operator) {\n    if (operator === \"add\") {\n      return parseFloat(operand1) + parseFloat(operand2);\n    } else if (operator === \"subtract\") {\n      return parseFloat(operand1) - parseFloat(operand2);\n    } else if (operator === \"multiply\") {\n      return parseFloat(operand1) * parseFloat(operand2);\n    } else if (operator === \"divide\") {\n      return parseFloat(operand1) / parseFloat(operand2);\n    }\n  }\n\n  operate(e) {\n    if (this.state.operator === \"\") {\n      const display = this.state.display;\n      \n      this.setState({\n        display: 0,\n        operand1: display,\n        operator: e.target.value,\n        decimal: false\n      })\n      \n    } else {\n      const display = this.state.display;\n      const operand1 = this.calculate(this.state.operand1, this.state.display, this.state.operator);\n      \n      this.setState({\n        display: 0,\n        operand1: operand1,\n        operand2: display,\n        operator: e.target.value,\n        decimal: false\n      }) \n    }\n    \n    this.setState({\n      lastInput: \"operator\"\n    })\n  }\n\n  clear() {\n    this.setState(this.initialState)\n  }\n\n  render() {\n    return (\n      <div id=\"calculator\">\n        <Display display={this.state.display} />\n        <Buttons\n          equal={() => this.equal()}\n          numbers={(e) => this.numbers(e)}\n          clear={() => this.clear()}\n          //decimal={() => this.decimal(e)}\n          operate={(e) => this.operate(e)} />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}